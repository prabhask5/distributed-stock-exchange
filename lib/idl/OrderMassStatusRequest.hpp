// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderMassStatusRequest.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__ORDERMASSSTATUSREQUEST_ORDERMASSSTATUSREQUEST_HPP
#define FAST_DDS_GENERATED__ORDERMASSSTATUSREQUEST_ORDERMASSSTATUSREQUEST_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>
#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ORDERMASSSTATUSREQUEST_SOURCE)
#define ORDERMASSSTATUSREQUEST_DllAPI __declspec( dllexport )
#else
#define ORDERMASSSTATUSREQUEST_DllAPI __declspec( dllimport )
#endif // ORDERMASSSTATUSREQUEST_SOURCE
#else
#define ORDERMASSSTATUSREQUEST_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ORDERMASSSTATUSREQUEST_DllAPI
#endif // _WIN32

namespace OrderMassStatusRequest {

/*!
 * @brief This class represents the structure OrderMassStatusRequest defined by the user in the IDL file.
 * @ingroup OrderMassStatusRequest
 */
class OrderMassStatusRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OrderMassStatusRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OrderMassStatusRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OrderMassStatusRequest that will be copied.
     */
    eProsima_user_DllExport OrderMassStatusRequest(
            const OrderMassStatusRequest& x)
    {
                    m_header = x.m_header;

                    m_MassStatusReqID = x.m_MassStatusReqID;

                    m_MassStatusReqType = x.m_MassStatusReqType;

                    m_Symbol = x.m_Symbol;

                    m_SecurityExchange = x.m_SecurityExchange;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OrderMassStatusRequest that will be copied.
     */
    eProsima_user_DllExport OrderMassStatusRequest(
            OrderMassStatusRequest&& x) noexcept
    {
        m_header = std::move(x.m_header);
        m_MassStatusReqID = std::move(x.m_MassStatusReqID);
        m_MassStatusReqType = x.m_MassStatusReqType;
        m_Symbol = std::move(x.m_Symbol);
        m_SecurityExchange = std::move(x.m_SecurityExchange);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OrderMassStatusRequest that will be copied.
     */
    eProsima_user_DllExport OrderMassStatusRequest& operator =(
            const OrderMassStatusRequest& x)
    {

                    m_header = x.m_header;

                    m_MassStatusReqID = x.m_MassStatusReqID;

                    m_MassStatusReqType = x.m_MassStatusReqType;

                    m_Symbol = x.m_Symbol;

                    m_SecurityExchange = x.m_SecurityExchange;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OrderMassStatusRequest that will be copied.
     */
    eProsima_user_DllExport OrderMassStatusRequest& operator =(
            OrderMassStatusRequest&& x) noexcept
    {

        m_header = std::move(x.m_header);
        m_MassStatusReqID = std::move(x.m_MassStatusReqID);
        m_MassStatusReqType = x.m_MassStatusReqType;
        m_Symbol = std::move(x.m_Symbol);
        m_SecurityExchange = std::move(x.m_SecurityExchange);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderMassStatusRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OrderMassStatusRequest& x) const
    {
        return (m_header == x.m_header &&
           m_MassStatusReqID == x.m_MassStatusReqID &&
           m_MassStatusReqType == x.m_MassStatusReqType &&
           m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange);
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderMassStatusRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OrderMassStatusRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header)
    {
        m_header = _header;
    }

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const
    {
        return m_header;
    }

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header()
    {
        return m_header;
    }


    /*!
     * @brief This function copies the value in member MassStatusReqID
     * @param _MassStatusReqID New value to be copied in member MassStatusReqID
     */
    eProsima_user_DllExport void MassStatusReqID(
            const std::string& _MassStatusReqID)
    {
        m_MassStatusReqID = _MassStatusReqID;
    }

    /*!
     * @brief This function moves the value in member MassStatusReqID
     * @param _MassStatusReqID New value to be moved in member MassStatusReqID
     */
    eProsima_user_DllExport void MassStatusReqID(
            std::string&& _MassStatusReqID)
    {
        m_MassStatusReqID = std::move(_MassStatusReqID);
    }

    /*!
     * @brief This function returns a constant reference to member MassStatusReqID
     * @return Constant reference to member MassStatusReqID
     */
    eProsima_user_DllExport const std::string& MassStatusReqID() const
    {
        return m_MassStatusReqID;
    }

    /*!
     * @brief This function returns a reference to member MassStatusReqID
     * @return Reference to member MassStatusReqID
     */
    eProsima_user_DllExport std::string& MassStatusReqID()
    {
        return m_MassStatusReqID;
    }


    /*!
     * @brief This function sets a value in member MassStatusReqType
     * @param _MassStatusReqType New value for member MassStatusReqType
     */
    eProsima_user_DllExport void MassStatusReqType(
            int32_t _MassStatusReqType)
    {
        m_MassStatusReqType = _MassStatusReqType;
    }

    /*!
     * @brief This function returns the value of member MassStatusReqType
     * @return Value of member MassStatusReqType
     */
    eProsima_user_DllExport int32_t MassStatusReqType() const
    {
        return m_MassStatusReqType;
    }

    /*!
     * @brief This function returns a reference to member MassStatusReqType
     * @return Reference to member MassStatusReqType
     */
    eProsima_user_DllExport int32_t& MassStatusReqType()
    {
        return m_MassStatusReqType;
    }


    /*!
     * @brief This function copies the value in member Symbol
     * @param _Symbol New value to be copied in member Symbol
     */
    eProsima_user_DllExport void Symbol(
            const std::string& _Symbol)
    {
        m_Symbol = _Symbol;
    }

    /*!
     * @brief This function moves the value in member Symbol
     * @param _Symbol New value to be moved in member Symbol
     */
    eProsima_user_DllExport void Symbol(
            std::string&& _Symbol)
    {
        m_Symbol = std::move(_Symbol);
    }

    /*!
     * @brief This function returns a constant reference to member Symbol
     * @return Constant reference to member Symbol
     */
    eProsima_user_DllExport const std::string& Symbol() const
    {
        return m_Symbol;
    }

    /*!
     * @brief This function returns a reference to member Symbol
     * @return Reference to member Symbol
     */
    eProsima_user_DllExport std::string& Symbol()
    {
        return m_Symbol;
    }


    /*!
     * @brief This function copies the value in member SecurityExchange
     * @param _SecurityExchange New value to be copied in member SecurityExchange
     */
    eProsima_user_DllExport void SecurityExchange(
            const std::string& _SecurityExchange)
    {
        m_SecurityExchange = _SecurityExchange;
    }

    /*!
     * @brief This function moves the value in member SecurityExchange
     * @param _SecurityExchange New value to be moved in member SecurityExchange
     */
    eProsima_user_DllExport void SecurityExchange(
            std::string&& _SecurityExchange)
    {
        m_SecurityExchange = std::move(_SecurityExchange);
    }

    /*!
     * @brief This function returns a constant reference to member SecurityExchange
     * @return Constant reference to member SecurityExchange
     */
    eProsima_user_DllExport const std::string& SecurityExchange() const
    {
        return m_SecurityExchange;
    }

    /*!
     * @brief This function returns a reference to member SecurityExchange
     * @return Reference to member SecurityExchange
     */
    eProsima_user_DllExport std::string& SecurityExchange()
    {
        return m_SecurityExchange;
    }



private:

    Header m_header;
    std::string m_MassStatusReqID;
    int32_t m_MassStatusReqType{0};
    std::string m_Symbol;
    std::string m_SecurityExchange;

};

} // namespace OrderMassStatusRequest

#endif // _FAST_DDS_GENERATED_ORDERMASSSTATUSREQUEST_ORDERMASSSTATUSREQUEST_HPP_


