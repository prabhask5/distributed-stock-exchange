// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderCancelRejectTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "OrderCancelRejectTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "OrderCancelReject.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace OrderCancelReject {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OrderCancelReject_type_identifier(
        TypeIdentifierPair& type_ids_OrderCancelReject)
{

    ReturnCode_t return_code_OrderCancelReject {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderCancelReject =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderCancelReject::OrderCancelReject", type_ids_OrderCancelReject);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderCancelReject)
    {
        StructTypeFlag struct_flags_OrderCancelReject = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OrderCancelReject = "OrderCancelReject::OrderCancelReject";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderCancelReject;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderCancelReject;
        CompleteTypeDetail detail_OrderCancelReject = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderCancelReject, ann_custom_OrderCancelReject, type_name_OrderCancelReject.to_string());
        CompleteStructHeader header_OrderCancelReject;
        header_OrderCancelReject = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OrderCancelReject);
        CompleteStructMemberSeq member_seq_OrderCancelReject;
        {
            TypeIdentifierPair type_ids_header;
            ReturnCode_t return_code_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Header", type_ids_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_header)
            {
            ::register_Header_type_identifier(type_ids_header);
            }
            StructMemberFlag member_flags_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_header = 0x00000000;
            bool common_header_ec {false};
            CommonStructMember common_header {TypeObjectUtils::build_common_struct_member(member_id_header, member_flags_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_header, common_header_ec))};
            if (!common_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_header = "header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_header;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_header = TypeObjectUtils::build_complete_member_detail(name_header, member_ann_builtin_header, ann_custom_OrderCancelReject);
            CompleteStructMember member_header = TypeObjectUtils::build_complete_struct_member(common_header, detail_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_header);
        }
        {
            TypeIdentifierPair type_ids_OrderID;
            ReturnCode_t return_code_OrderID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrderID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_OrderID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_OrderID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_OrderID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrderID = 0x00000001;
            bool common_OrderID_ec {false};
            CommonStructMember common_OrderID {TypeObjectUtils::build_common_struct_member(member_id_OrderID, member_flags_OrderID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrderID, common_OrderID_ec))};
            if (!common_OrderID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrderID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrderID = "OrderID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrderID;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_OrderID = TypeObjectUtils::build_complete_member_detail(name_OrderID, member_ann_builtin_OrderID, ann_custom_OrderCancelReject);
            CompleteStructMember member_OrderID = TypeObjectUtils::build_complete_struct_member(common_OrderID, detail_OrderID);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_OrderID);
        }
        {
            TypeIdentifierPair type_ids_ClOrdID;
            ReturnCode_t return_code_ClOrdID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ClOrdID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_ClOrdID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ClOrdID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_ClOrdID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_ClOrdID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ClOrdID = 0x00000002;
            bool common_ClOrdID_ec {false};
            CommonStructMember common_ClOrdID {TypeObjectUtils::build_common_struct_member(member_id_ClOrdID, member_flags_ClOrdID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ClOrdID, common_ClOrdID_ec))};
            if (!common_ClOrdID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ClOrdID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ClOrdID = "ClOrdID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ClOrdID;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_ClOrdID = TypeObjectUtils::build_complete_member_detail(name_ClOrdID, member_ann_builtin_ClOrdID, ann_custom_OrderCancelReject);
            CompleteStructMember member_ClOrdID = TypeObjectUtils::build_complete_struct_member(common_ClOrdID, detail_ClOrdID);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_ClOrdID);
        }
        {
            TypeIdentifierPair type_ids_OrigClOrdID;
            ReturnCode_t return_code_OrigClOrdID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrigClOrdID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_OrigClOrdID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrigClOrdID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_OrigClOrdID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_OrigClOrdID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrigClOrdID = 0x00000003;
            bool common_OrigClOrdID_ec {false};
            CommonStructMember common_OrigClOrdID {TypeObjectUtils::build_common_struct_member(member_id_OrigClOrdID, member_flags_OrigClOrdID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrigClOrdID, common_OrigClOrdID_ec))};
            if (!common_OrigClOrdID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrigClOrdID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrigClOrdID = "OrigClOrdID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrigClOrdID;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_OrigClOrdID = TypeObjectUtils::build_complete_member_detail(name_OrigClOrdID, member_ann_builtin_OrigClOrdID, ann_custom_OrderCancelReject);
            CompleteStructMember member_OrigClOrdID = TypeObjectUtils::build_complete_struct_member(common_OrigClOrdID, detail_OrigClOrdID);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_OrigClOrdID);
        }
        {
            TypeIdentifierPair type_ids_OrdStatus;
            ReturnCode_t return_code_OrdStatus {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrdStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_OrdStatus);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrdStatus)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OrdStatus Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_OrdStatus = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrdStatus = 0x00000004;
            bool common_OrdStatus_ec {false};
            CommonStructMember common_OrdStatus {TypeObjectUtils::build_common_struct_member(member_id_OrdStatus, member_flags_OrdStatus, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrdStatus, common_OrdStatus_ec))};
            if (!common_OrdStatus_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrdStatus member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrdStatus = "OrdStatus";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrdStatus;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_OrdStatus = TypeObjectUtils::build_complete_member_detail(name_OrdStatus, member_ann_builtin_OrdStatus, ann_custom_OrderCancelReject);
            CompleteStructMember member_OrdStatus = TypeObjectUtils::build_complete_struct_member(common_OrdStatus, detail_OrdStatus);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_OrdStatus);
        }
        {
            TypeIdentifierPair type_ids_TransactTime;
            ReturnCode_t return_code_TransactTime {eprosima::fastdds::dds::RETCODE_OK};
            return_code_TransactTime =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_TransactTime);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_TransactTime)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TransactTime Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_TransactTime = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_TransactTime = 0x00000005;
            bool common_TransactTime_ec {false};
            CommonStructMember common_TransactTime {TypeObjectUtils::build_common_struct_member(member_id_TransactTime, member_flags_TransactTime, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_TransactTime, common_TransactTime_ec))};
            if (!common_TransactTime_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure TransactTime member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_TransactTime = "TransactTime";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TransactTime;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_TransactTime = TypeObjectUtils::build_complete_member_detail(name_TransactTime, member_ann_builtin_TransactTime, ann_custom_OrderCancelReject);
            CompleteStructMember member_TransactTime = TypeObjectUtils::build_complete_struct_member(common_TransactTime, detail_TransactTime);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_TransactTime);
        }
        {
            TypeIdentifierPair type_ids_CxlRejResponseTo;
            ReturnCode_t return_code_CxlRejResponseTo {eprosima::fastdds::dds::RETCODE_OK};
            return_code_CxlRejResponseTo =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_CxlRejResponseTo);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_CxlRejResponseTo)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CxlRejResponseTo Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_CxlRejResponseTo = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_CxlRejResponseTo = 0x00000006;
            bool common_CxlRejResponseTo_ec {false};
            CommonStructMember common_CxlRejResponseTo {TypeObjectUtils::build_common_struct_member(member_id_CxlRejResponseTo, member_flags_CxlRejResponseTo, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_CxlRejResponseTo, common_CxlRejResponseTo_ec))};
            if (!common_CxlRejResponseTo_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure CxlRejResponseTo member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_CxlRejResponseTo = "CxlRejResponseTo";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CxlRejResponseTo;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_CxlRejResponseTo = TypeObjectUtils::build_complete_member_detail(name_CxlRejResponseTo, member_ann_builtin_CxlRejResponseTo, ann_custom_OrderCancelReject);
            CompleteStructMember member_CxlRejResponseTo = TypeObjectUtils::build_complete_struct_member(common_CxlRejResponseTo, detail_CxlRejResponseTo);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_CxlRejResponseTo);
        }
        {
            TypeIdentifierPair type_ids_Text;
            ReturnCode_t return_code_Text {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Text =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Text);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Text)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Text))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Text = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Text = 0x00000007;
            bool common_Text_ec {false};
            CommonStructMember common_Text {TypeObjectUtils::build_common_struct_member(member_id_Text, member_flags_Text, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Text, common_Text_ec))};
            if (!common_Text_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Text member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Text = "Text";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Text;
            ann_custom_OrderCancelReject.reset();
            CompleteMemberDetail detail_Text = TypeObjectUtils::build_complete_member_detail(name_Text, member_ann_builtin_Text, ann_custom_OrderCancelReject);
            CompleteStructMember member_Text = TypeObjectUtils::build_complete_struct_member(common_Text, detail_Text);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderCancelReject, member_Text);
        }
        CompleteStructType struct_type_OrderCancelReject = TypeObjectUtils::build_complete_struct_type(struct_flags_OrderCancelReject, header_OrderCancelReject, member_seq_OrderCancelReject);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OrderCancelReject, type_name_OrderCancelReject.to_string(), type_ids_OrderCancelReject))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OrderCancelReject::OrderCancelReject already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace OrderCancelReject

