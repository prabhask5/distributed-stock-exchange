// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderMassStatusRequestTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "OrderMassStatusRequestTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "OrderMassStatusRequest.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace OrderMassStatusRequest {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OrderMassStatusRequest_type_identifier(
        TypeIdentifierPair& type_ids_OrderMassStatusRequest)
{

    ReturnCode_t return_code_OrderMassStatusRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderMassStatusRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderMassStatusRequest::OrderMassStatusRequest", type_ids_OrderMassStatusRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderMassStatusRequest)
    {
        StructTypeFlag struct_flags_OrderMassStatusRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OrderMassStatusRequest = "OrderMassStatusRequest::OrderMassStatusRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderMassStatusRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderMassStatusRequest;
        CompleteTypeDetail detail_OrderMassStatusRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderMassStatusRequest, ann_custom_OrderMassStatusRequest, type_name_OrderMassStatusRequest.to_string());
        CompleteStructHeader header_OrderMassStatusRequest;
        header_OrderMassStatusRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OrderMassStatusRequest);
        CompleteStructMemberSeq member_seq_OrderMassStatusRequest;
        {
            TypeIdentifierPair type_ids_header;
            ReturnCode_t return_code_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Header", type_ids_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_header)
            {
            ::register_Header_type_identifier(type_ids_header);
            }
            StructMemberFlag member_flags_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_header = 0x00000000;
            bool common_header_ec {false};
            CommonStructMember common_header {TypeObjectUtils::build_common_struct_member(member_id_header, member_flags_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_header, common_header_ec))};
            if (!common_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_header = "header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_header;
            ann_custom_OrderMassStatusRequest.reset();
            CompleteMemberDetail detail_header = TypeObjectUtils::build_complete_member_detail(name_header, member_ann_builtin_header, ann_custom_OrderMassStatusRequest);
            CompleteStructMember member_header = TypeObjectUtils::build_complete_struct_member(common_header, detail_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderMassStatusRequest, member_header);
        }
        {
            TypeIdentifierPair type_ids_MassStatusReqID;
            ReturnCode_t return_code_MassStatusReqID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MassStatusReqID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_MassStatusReqID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MassStatusReqID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_MassStatusReqID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_MassStatusReqID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MassStatusReqID = 0x00000001;
            bool common_MassStatusReqID_ec {false};
            CommonStructMember common_MassStatusReqID {TypeObjectUtils::build_common_struct_member(member_id_MassStatusReqID, member_flags_MassStatusReqID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MassStatusReqID, common_MassStatusReqID_ec))};
            if (!common_MassStatusReqID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MassStatusReqID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MassStatusReqID = "MassStatusReqID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MassStatusReqID;
            ann_custom_OrderMassStatusRequest.reset();
            CompleteMemberDetail detail_MassStatusReqID = TypeObjectUtils::build_complete_member_detail(name_MassStatusReqID, member_ann_builtin_MassStatusReqID, ann_custom_OrderMassStatusRequest);
            CompleteStructMember member_MassStatusReqID = TypeObjectUtils::build_complete_struct_member(common_MassStatusReqID, detail_MassStatusReqID);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderMassStatusRequest, member_MassStatusReqID);
        }
        {
            TypeIdentifierPair type_ids_MassStatusReqType;
            ReturnCode_t return_code_MassStatusReqType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MassStatusReqType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_MassStatusReqType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MassStatusReqType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MassStatusReqType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_MassStatusReqType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MassStatusReqType = 0x00000002;
            bool common_MassStatusReqType_ec {false};
            CommonStructMember common_MassStatusReqType {TypeObjectUtils::build_common_struct_member(member_id_MassStatusReqType, member_flags_MassStatusReqType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MassStatusReqType, common_MassStatusReqType_ec))};
            if (!common_MassStatusReqType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MassStatusReqType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MassStatusReqType = "MassStatusReqType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MassStatusReqType;
            ann_custom_OrderMassStatusRequest.reset();
            CompleteMemberDetail detail_MassStatusReqType = TypeObjectUtils::build_complete_member_detail(name_MassStatusReqType, member_ann_builtin_MassStatusReqType, ann_custom_OrderMassStatusRequest);
            CompleteStructMember member_MassStatusReqType = TypeObjectUtils::build_complete_struct_member(common_MassStatusReqType, detail_MassStatusReqType);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderMassStatusRequest, member_MassStatusReqType);
        }
        {
            TypeIdentifierPair type_ids_Symbol;
            ReturnCode_t return_code_Symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Symbol = 0x00000003;
            bool common_Symbol_ec {false};
            CommonStructMember common_Symbol {TypeObjectUtils::build_common_struct_member(member_id_Symbol, member_flags_Symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Symbol, common_Symbol_ec))};
            if (!common_Symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Symbol = "Symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Symbol;
            ann_custom_OrderMassStatusRequest.reset();
            CompleteMemberDetail detail_Symbol = TypeObjectUtils::build_complete_member_detail(name_Symbol, member_ann_builtin_Symbol, ann_custom_OrderMassStatusRequest);
            CompleteStructMember member_Symbol = TypeObjectUtils::build_complete_struct_member(common_Symbol, detail_Symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderMassStatusRequest, member_Symbol);
        }
        {
            TypeIdentifierPair type_ids_SecurityExchange;
            ReturnCode_t return_code_SecurityExchange {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityExchange =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SecurityExchange);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityExchange)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_SecurityExchange))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_SecurityExchange = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityExchange = 0x00000004;
            bool common_SecurityExchange_ec {false};
            CommonStructMember common_SecurityExchange {TypeObjectUtils::build_common_struct_member(member_id_SecurityExchange, member_flags_SecurityExchange, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityExchange, common_SecurityExchange_ec))};
            if (!common_SecurityExchange_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityExchange member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityExchange = "SecurityExchange";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityExchange;
            ann_custom_OrderMassStatusRequest.reset();
            CompleteMemberDetail detail_SecurityExchange = TypeObjectUtils::build_complete_member_detail(name_SecurityExchange, member_ann_builtin_SecurityExchange, ann_custom_OrderMassStatusRequest);
            CompleteStructMember member_SecurityExchange = TypeObjectUtils::build_complete_struct_member(common_SecurityExchange, detail_SecurityExchange);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderMassStatusRequest, member_SecurityExchange);
        }
        CompleteStructType struct_type_OrderMassStatusRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_OrderMassStatusRequest, header_OrderMassStatusRequest, member_seq_OrderMassStatusRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OrderMassStatusRequest, type_name_OrderMassStatusRequest.to_string(), type_ids_OrderMassStatusRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OrderMassStatusRequest::OrderMassStatusRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace OrderMassStatusRequest

