// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BusinessMessageReject.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__BUSINESSMESSAGEREJECT_BUSINESSMESSAGEREJECT_HPP
#define FAST_DDS_GENERATED__BUSINESSMESSAGEREJECT_BUSINESSMESSAGEREJECT_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>
#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BUSINESSMESSAGEREJECT_SOURCE)
#define BUSINESSMESSAGEREJECT_DllAPI __declspec(dllexport)
#else
#define BUSINESSMESSAGEREJECT_DllAPI __declspec(dllimport)
#endif // BUSINESSMESSAGEREJECT_SOURCE
#else
#define BUSINESSMESSAGEREJECT_DllAPI
#endif // EPROSIMA_USER_DLL_EXPORT
#else
#define BUSINESSMESSAGEREJECT_DllAPI
#endif // _WIN32

namespace BusinessMessageReject
{

    /*!
     * @brief This class represents the structure BusinessMessageReject defined by the user in the IDL file.
     * @ingroup BusinessMessageReject
     */
    class BusinessMessageReject
    {
    public:
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport BusinessMessageReject()
        {
        }

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~BusinessMessageReject()
        {
        }

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object BusinessMessageReject that will be copied.
         */
        eProsima_user_DllExport BusinessMessageReject(
            const BusinessMessageReject &x)
        {
            m_header = x.m_header;

            m_RefMsgType = x.m_RefMsgType;

            m_BusinessRejectReason = x.m_BusinessRejectReason;

            m_Text = x.m_Text;
        }

        /*!
         * @brief Move constructor.
         * @param x Reference to the object BusinessMessageReject that will be copied.
         */
        eProsima_user_DllExport BusinessMessageReject(
            BusinessMessageReject &&x) noexcept
        {
            m_header = std::move(x.m_header);
            m_RefMsgType = std::move(x.m_RefMsgType);
            m_BusinessRejectReason = x.m_BusinessRejectReason;
            m_Text = std::move(x.m_Text);
        }

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object BusinessMessageReject that will be copied.
         */
        eProsima_user_DllExport BusinessMessageReject &operator=(
            const BusinessMessageReject &x)
        {

            m_header = x.m_header;

            m_RefMsgType = x.m_RefMsgType;

            m_BusinessRejectReason = x.m_BusinessRejectReason;

            m_Text = x.m_Text;

            return *this;
        }

        /*!
         * @brief Move assignment.
         * @param x Reference to the object BusinessMessageReject that will be copied.
         */
        eProsima_user_DllExport BusinessMessageReject &operator=(
            BusinessMessageReject &&x) noexcept
        {

            m_header = std::move(x.m_header);
            m_RefMsgType = std::move(x.m_RefMsgType);
            m_BusinessRejectReason = x.m_BusinessRejectReason;
            m_Text = std::move(x.m_Text);
            return *this;
        }

        /*!
         * @brief Comparison operator.
         * @param x BusinessMessageReject object to compare.
         */
        eProsima_user_DllExport bool operator==(
            const BusinessMessageReject &x) const
        {
            return (m_header == x.m_header &&
                    m_RefMsgType == x.m_RefMsgType &&
                    m_BusinessRejectReason == x.m_BusinessRejectReason &&
                    m_Text == x.m_Text);
        }

        /*!
         * @brief Comparison operator.
         * @param x BusinessMessageReject object to compare.
         */
        eProsima_user_DllExport bool operator!=(
            const BusinessMessageReject &x) const
        {
            return !(*this == x);
        }

        /*!
         * @brief This function copies the value in member header
         * @param _header New value to be copied in member header
         */
        eProsima_user_DllExport void header(
            const Header &_header)
        {
            m_header = _header;
        }

        /*!
         * @brief This function moves the value in member header
         * @param _header New value to be moved in member header
         */
        eProsima_user_DllExport void header(
            Header &&_header)
        {
            m_header = std::move(_header);
        }

        /*!
         * @brief This function returns a constant reference to member header
         * @return Constant reference to member header
         */
        eProsima_user_DllExport const Header &header() const
        {
            return m_header;
        }

        /*!
         * @brief This function returns a reference to member header
         * @return Reference to member header
         */
        eProsima_user_DllExport Header &header()
        {
            return m_header;
        }

        /*!
         * @brief This function copies the value in member RefMsgType
         * @param _RefMsgType New value to be copied in member RefMsgType
         */
        eProsima_user_DllExport void RefMsgType(
            const std::string &_RefMsgType)
        {
            m_RefMsgType = _RefMsgType;
        }

        /*!
         * @brief This function moves the value in member RefMsgType
         * @param _RefMsgType New value to be moved in member RefMsgType
         */
        eProsima_user_DllExport void RefMsgType(
            std::string &&_RefMsgType)
        {
            m_RefMsgType = std::move(_RefMsgType);
        }

        /*!
         * @brief This function returns a constant reference to member RefMsgType
         * @return Constant reference to member RefMsgType
         */
        eProsima_user_DllExport const std::string &RefMsgType() const
        {
            return m_RefMsgType;
        }

        /*!
         * @brief This function returns a reference to member RefMsgType
         * @return Reference to member RefMsgType
         */
        eProsima_user_DllExport std::string &RefMsgType()
        {
            return m_RefMsgType;
        }

        /*!
         * @brief This function sets a value in member BusinessRejectReason
         * @param _BusinessRejectReason New value for member BusinessRejectReason
         */
        eProsima_user_DllExport void BusinessRejectReason(
            int32_t _BusinessRejectReason)
        {
            m_BusinessRejectReason = _BusinessRejectReason;
        }

        /*!
         * @brief This function returns the value of member BusinessRejectReason
         * @return Value of member BusinessRejectReason
         */
        eProsima_user_DllExport int32_t BusinessRejectReason() const
        {
            return m_BusinessRejectReason;
        }

        /*!
         * @brief This function returns a reference to member BusinessRejectReason
         * @return Reference to member BusinessRejectReason
         */
        eProsima_user_DllExport int32_t &BusinessRejectReason()
        {
            return m_BusinessRejectReason;
        }

        /*!
         * @brief This function copies the value in member Text
         * @param _Text New value to be copied in member Text
         */
        eProsima_user_DllExport void Text(
            const std::string &_Text)
        {
            m_Text = _Text;
        }

        /*!
         * @brief This function moves the value in member Text
         * @param _Text New value to be moved in member Text
         */
        eProsima_user_DllExport void Text(
            std::string &&_Text)
        {
            m_Text = std::move(_Text);
        }

        /*!
         * @brief This function returns a constant reference to member Text
         * @return Constant reference to member Text
         */
        eProsima_user_DllExport const std::string &Text() const
        {
            return m_Text;
        }

        /*!
         * @brief This function returns a reference to member Text
         * @return Reference to member Text
         */
        eProsima_user_DllExport std::string &Text()
        {
            return m_Text;
        }

    private:
        Header m_header;
        std::string m_RefMsgType;
        int32_t m_BusinessRejectReason{0};
        std::string m_Text;
    };

} // namespace BusinessMessageReject

#endif // _FAST_DDS_GENERATED_BUSINESSMESSAGEREJECT_BUSINESSMESSAGEREJECT_HPP_
