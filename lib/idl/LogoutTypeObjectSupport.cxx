// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LogoutTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "LogoutTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Logout.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace Logout {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Logout_type_identifier(
        TypeIdentifierPair& type_ids_Logout)
{

    ReturnCode_t return_code_Logout {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Logout =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Logout::Logout", type_ids_Logout);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Logout)
    {
        StructTypeFlag struct_flags_Logout = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Logout = "Logout::Logout";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Logout;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Logout;
        CompleteTypeDetail detail_Logout = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Logout, ann_custom_Logout, type_name_Logout.to_string());
        CompleteStructHeader header_Logout;
        header_Logout = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Logout);
        CompleteStructMemberSeq member_seq_Logout;
        {
            TypeIdentifierPair type_ids_header;
            ReturnCode_t return_code_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Header", type_ids_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_header)
            {
            ::register_Header_type_identifier(type_ids_header);
            }
            StructMemberFlag member_flags_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_header = 0x00000000;
            bool common_header_ec {false};
            CommonStructMember common_header {TypeObjectUtils::build_common_struct_member(member_id_header, member_flags_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_header, common_header_ec))};
            if (!common_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_header = "header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_header;
            ann_custom_Logout.reset();
            CompleteMemberDetail detail_header = TypeObjectUtils::build_complete_member_detail(name_header, member_ann_builtin_header, ann_custom_Logout);
            CompleteStructMember member_header = TypeObjectUtils::build_complete_struct_member(common_header, detail_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logout, member_header);
        }
        {
            TypeIdentifierPair type_ids_Text;
            ReturnCode_t return_code_Text {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Text =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Text);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Text)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Text))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Text = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Text = 0x00000001;
            bool common_Text_ec {false};
            CommonStructMember common_Text {TypeObjectUtils::build_common_struct_member(member_id_Text, member_flags_Text, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Text, common_Text_ec))};
            if (!common_Text_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Text member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Text = "Text";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Text;
            ann_custom_Logout.reset();
            CompleteMemberDetail detail_Text = TypeObjectUtils::build_complete_member_detail(name_Text, member_ann_builtin_Text, ann_custom_Logout);
            CompleteStructMember member_Text = TypeObjectUtils::build_complete_struct_member(common_Text, detail_Text);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logout, member_Text);
        }
        CompleteStructType struct_type_Logout = TypeObjectUtils::build_complete_struct_type(struct_flags_Logout, header_Logout, member_seq_Logout);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Logout, type_name_Logout.to_string(), type_ids_Logout))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Logout::Logout already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace Logout

